import { StreamReceiver } from './receiver';
import { StreamSender } from './sender';
import { StreamKinds } from './utils/types';
import { TypedEventEmitter } from './utils/typed-event-emitter';
import type { IMediaGatewayConnector } from './interfaces/gateway';
import type { IRealtimeSocket } from './interfaces/rtsocket';
import type { ISessionCallbacks, ISessionConfig } from './interfaces/session';
import { StreamRemote } from './remote';
import type { IStreamSender, SenderConfig } from './interfaces/sender';
import type { IStreamReceiver } from './interfaces';
import { StreamPublisher } from './publisher';
import { StreamConsumer } from './consumer';
import { StreamConsumerPair } from './consumer-pair';
import { ReceiverMixMinusAudio } from './receiver-mix-minus';
export declare class Session extends TypedEventEmitter<ISessionCallbacks> {
    private _cfg;
    private _socket;
    private _connector;
    private _audioSenders;
    private _videoSenders;
    private _audioReceivers;
    private _videoReceivers;
    private _remotes;
    private logger;
    private _rpc;
    private _mixminus?;
    disconnected: boolean;
    constructor(_cfg: ISessionConfig, _socket: IRealtimeSocket, _connector: IMediaGatewayConnector);
    connect(): Promise<void>;
    private _onSenderStopped;
    disconnect(): Promise<void>;
    createPublisher(cfg: SenderConfig): StreamPublisher;
    createConsumer(remote: StreamRemote): StreamConsumer;
    createConsumerPair(peerId: string, audioName: string, videoName: string): StreamConsumerPair;
    createSender(cfg: SenderConfig): StreamSender;
    createReceiver(kind: StreamKinds): StreamReceiver;
    takeReceiver(kind: StreamKinds): IStreamReceiver;
    getMixMinusAudio(): ReceiverMixMinusAudio | undefined;
    backReceiver(receiver: IStreamReceiver): void;
    getSender(kind: StreamKinds, name: string): IStreamSender;
    private update;
    private updateSdp;
    private onStreamEvent;
}
//# sourceMappingURL=session.d.ts.map