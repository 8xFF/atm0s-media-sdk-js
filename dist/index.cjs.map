{"version":3,"file":"index.cjs","sources":["../src/lib/utils/http.ts","../src/lib/core/gateway.ts","../src/lib/utils/shared.ts","../src/lib/utils/typed-event-emitter.ts","../src/lib/utils/types.ts","../src/lib/utils/rtc-peer.ts","../src/lib/core/tracks.ts","../src/lib/core/socket.ts","../src/lib/receiver.ts","../src/lib/core/rpc.ts","../src/lib/sender.ts","../src/lib/session.ts","../src/index.ts"],"sourcesContent":["export function httpPost<T>(url: string, body: unknown): Promise<T> {\n  const myHeaders = new Headers();\n  myHeaders.append('Content-Type', 'application/json');\n\n  const raw = JSON.stringify(body);\n\n  const requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow' as RequestRedirect,\n  };\n\n  return fetch(url, requestOptions)\n    .then((response) => response.text())\n    .then((result) => JSON.parse(result));\n}\n\nexport function httpGet<T>(url: string): Promise<T> {\n  const myHeaders = new Headers();\n  myHeaders.append('Content-Type', 'application/json');\n\n  const requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow' as RequestRedirect,\n  };\n\n  return fetch(url, requestOptions)\n    .then((response) => response.text())\n    .then((result) => JSON.parse(result));\n}\n","import { httpGet, httpPost } from '../utils/http';\nimport _debug from 'debug';\n\nexport interface IConnectConfig {\n  room: string;\n  peer: string;\n  token: string;\n  sdp: string;\n  mix_minus_audio?: string;\n  codecs?: string[];\n  senders: {\n    uuid: string;\n    label: string;\n    kind: string;\n    simulcast?: boolean;\n    max_bitrate?: number;\n    content_hint?: string;\n    screen?: boolean;\n  }[];\n  receivers: {\n    audio: number;\n    video: number;\n  };\n}\n\nexport interface IConnectResponse {\n  status: boolean;\n  data: {\n    node_id: number;\n    conn_id: string;\n    sdp: string;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error: any;\n}\n\n/**\n * Represents a media server gateway connector.\n */\nexport interface IMediaGatewayConnector {\n  /**\n   * Selects a media stream from the given URLs.\n   * @param urls - The URLs of the media streams.\n   * @returns A promise that resolves to the selected media stream.\n   */\n  selectFromUrls(urls: string | string[]): Promise<string>;\n\n  /**\n   * Connects to the media server using the provided configuration.\n   * @param url - The URL of the media server.\n   * @param config - The connection configuration.\n   */\n  connect(url: string, config: IConnectConfig): Promise<IConnectResponse>;\n\n  /**\n   * Sends a ice candidate update to the media server.\n   * @param url - The URL of the media server.\n   * @param nodeId - The ID of the node.\n   * @param connId - The ID of the connection.\n   * @param ice - The ICE candidate event.\n   */\n  iceCandidate(\n    url: string,\n    nodeId: number,\n    connId: string,\n    ice: RTCPeerConnectionIceEvent,\n  ): void;\n}\n\nexport class MediaGatewayConnector implements IMediaGatewayConnector {\n  private _log = _debug('atm0s:media-server');\n\n  constructor(private _url?: string) {}\n\n  public get url(): string | undefined {\n    return this._url;\n  }\n\n  public async selectFromUrls(urls: string | string[]): Promise<string> {\n    if (typeof urls === 'string') {\n      return (this._url = urls);\n    }\n\n    const waiting_urls: { [url: string]: boolean } = {};\n\n    for (const url of urls) {\n      waiting_urls[url] = true;\n      try {\n        const res = await httpGet<{\n          status: boolean;\n          data: { ready: boolean };\n        }>(url + '/healthcheck?ts=' + new Date().getTime());\n        if (res.status === true && res.data && res.data.ready === true) {\n          return url;\n        }\n      } catch (err) {\n        delete waiting_urls[url];\n        this._log('selectFromUrls :: error:', waiting_urls, url, err);\n      }\n    }\n\n    throw new Error('No available media server');\n  }\n\n  async connect(\n    url: string,\n    config: IConnectConfig,\n  ): Promise<IConnectResponse> {\n    this._log('connect :: connect to media server:', this._url);\n    return httpPost<IConnectResponse>(url + '/webrtc/connect', config);\n  }\n\n  async iceCandidate(\n    url: string,\n    nodeId: number,\n    connId: string,\n    ice: RTCPeerConnectionIceEvent,\n  ) {\n    this._log('iceCandidate :: ice candidate to media server:', url);\n\n    const body = {\n      node_id: nodeId,\n      conn_id: connId,\n      candidate: ice.candidate?.candidate || '',\n      sdp_mid: ice.candidate?.sdpMid || '',\n      sdp_mline_index: ice.candidate?.sdpMLineIndex || 0,\n      username_fragment: ice.candidate?.usernameFragment || '',\n    };\n\n    const res = await httpPost(url + '/webrtc/ice_remote', body);\n    this._log('iceCandidate :: ice candidate response:', res);\n  }\n}\n","import type { StreamKinds } from './types';\n\n/**\n * Generates a random SSRC (Synchronization Source) number.\n *\n * @remarks\n * This function generates a random 32-bit integer that can be used as an SSRC number.\n *\n * @returns A random SSRC number.\n */\nexport function randomSSRC() {\n  return Math.floor(Math.random() * 99999999) + 10000000;\n}\n\n/**\n * Generates a random string of the specified size.\n * @param size The size of the string to generate.\n * @returns A random string of the specified size.\n */\nexport function randomString(size: number) {\n  let text = '';\n  const possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < size; i++)\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  return text;\n}\n\n/**\n * Delays the execution of the function that calls it for a specified number of milliseconds.\n * @param ms - The number of milliseconds to delay the execution.\n * @returns A promise that resolves after the specified delay.\n */\nexport async function delay(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type Constructor<T = {}> = new (...args: unknown[]) => T;\n\nexport function applyMixin(\n  target: Constructor,\n  mixin: Constructor,\n  includeConstructor = false,\n): void {\n  // Figure out the inheritance chain of the mixin\n  const inheritanceChain: Constructor[] = [mixin];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const current = inheritanceChain[0];\n    const base = Object.getPrototypeOf(current);\n    if (base?.prototype) {\n      inheritanceChain.unshift(base);\n    } else {\n      break;\n    }\n  }\n  for (const ctor of inheritanceChain) {\n    for (const prop of Object.getOwnPropertyNames(ctor.prototype)) {\n      // Do not override the constructor\n      if (includeConstructor || prop !== 'constructor') {\n        Object.defineProperty(\n          target.prototype,\n          prop,\n          Object.getOwnPropertyDescriptor(ctor.prototype, prop) ??\n            Object.create(null),\n        );\n      }\n    }\n  }\n}\n\nexport function getTrack(\n  stream: MediaStream | undefined | null,\n  kind: StreamKinds,\n) {\n  if (!stream) {\n    return undefined;\n  }\n  if (kind === 'audio') {\n    return stream.getAudioTracks()[0];\n  }\n  if (kind === 'video') {\n    return stream.getVideoTracks()[0];\n  }\n  return undefined;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { applyMixin } from './shared';\n\nclass EventEmitter {\n  events: any = {};\n\n  emit(event: string, ...args: any) {\n    for (const i of this.events[event] || []) {\n      i(...args);\n    }\n  }\n\n  on(event: string, cb: any) {\n    (this.events[event] = this.events[event] || []).push(cb);\n    return () =>\n      (this.events[event] = this.events[event].filter((i: any) => i !== cb));\n  }\n\n  off(event: string, cb: any) {\n    this.events[event] = this.events[event].filter((i: any) => i !== cb);\n  }\n\n  offAllListeners() {\n    this.events = {};\n  }\n\n  removeAllListeners() {\n    this.offAllListeners();\n  }\n\n  removeListener(event: string, cb: any) {\n    this.off(event, cb);\n  }\n\n  listeners(event: string) {\n    return this.events[event];\n  }\n\n  listenerCount(event: string) {\n    return this.events[event].length;\n  }\n}\n\nexport type EventHandler =\n  // Add more overloads as necessary\n  | ((arg1: any, arg2: any, arg3: any, arg4: any) => void)\n  | ((arg1: any, arg2: any, arg3: any) => void)\n  | ((arg1: any, arg2: any) => void)\n  | ((arg1: any) => void)\n  | ((...args: any[]) => void);\n\nexport interface TypedEventEmitter<\n  TEvents extends Record<keyof TEvents, EventHandler>,\n> {\n  on<TEvent extends keyof TEvents>(\n    event: TEvent,\n    callback: TEvents[TEvent],\n  ): this;\n  removeListener<TEvent extends keyof TEvents>(\n    event: TEvent,\n    callback: TEvents[TEvent],\n  ): this;\n  off<TEvent extends keyof TEvents>(\n    event: TEvent,\n    callback: TEvents[TEvent],\n  ): this;\n\n  offAllListeners(): this;\n  removeAllListeners(): this;\n\n  emit<TEvent extends keyof TEvents>(\n    event: TEvent,\n    ...args: Parameters<TEvents[TEvent]>\n  ): boolean;\n\n  listeners<TEvent extends keyof TEvents>(eventName: TEvent): TEvents[TEvent][];\n  listenerCount<TEvent extends keyof TEvents>(\n    event: TEvent,\n    listener?: TEvents[TEvent],\n  ): number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class TypedEventEmitter<\n  TEvents extends Record<keyof TEvents, EventHandler>,\n> {}\n\n// Make TypedEventEmitter inherit from EventEmitter without actually extending\napplyMixin(TypedEventEmitter, EventEmitter);\n","export enum StreamKinds {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n}\n\nexport enum Codecs {\n  OPUS = 'OPUS',\n  VP8 = 'VP8',\n  VP9 = 'VP9',\n  H264 = 'H264',\n}\n\nexport enum ContentHint {\n  None = 'none',\n  Motion = 'motion',\n  Detail = 'detail',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type AnyFunction = (...args: any[]) => any;\n\nexport enum LatencyMode {\n  UltraLow = 'ultra-low',\n  Default = 'default',\n  Smooth200 = 'smooth-200',\n  Smooth500 = 'smooth-500',\n  Smooth800 = 'smooth-800',\n  Smooth1000 = 'smooth-1000',\n  Smooth2000 = 'smooth-2000',\n}\n\nexport type SenderConfig = {\n  stream?: MediaStream | null;\n  name: string;\n  kind: StreamKinds;\n  preferredCodecs?: Codecs[];\n  simulcast?: boolean;\n  maxBitrate?: number;\n  contentHint?: ContentHint;\n  screen?: boolean;\n};\n\n/**\n * Mapping of latency modes to maximum packets.\n * This is to configure Audio Jitter Buffer Max Packets for React Native WebRTC.\n *\n */\nexport const LatencyMode2MaxPackets = {\n  [LatencyMode.UltraLow]: [10, 10],\n  [LatencyMode.Smooth200]: [20, 20],\n  [LatencyMode.Smooth500]: [25, 25],\n  [LatencyMode.Smooth800]: [40, 40],\n  [LatencyMode.Smooth1000]: [50, 50],\n  [LatencyMode.Smooth2000]: [100, 100],\n  [LatencyMode.Default]: [undefined, undefined],\n};\n\n/**\n * Mapping of latency modes to playout delay hints. Also for React Native WebRTC, maybe?\n */\nexport const LatencyMode2DelayHint = {\n  [LatencyMode.UltraLow]: 0,\n  [LatencyMode.Smooth200]: 0.2,\n  [LatencyMode.Smooth500]: 0.5,\n  [LatencyMode.Smooth800]: 0.8,\n  [LatencyMode.Smooth1000]: 1,\n  [LatencyMode.Smooth2000]: 2,\n  [LatencyMode.Default]: undefined,\n};\n","export interface RTCRtpTransceiverInitExtended extends RTCRtpTransceiverInit {\n  simulcast?: boolean;\n  isScreen?: boolean;\n  maxBitrate?: number;\n  preferredCodecs?: { kind: string; codecs: string[] };\n}\n\nexport class RTCPeerConnectionAugmented extends RTCPeerConnection {\n  constructor(configuration?: RTCConfiguration) {\n    super(configuration);\n  }\n\n  override addTransceiver(\n    trackOrKind: MediaStreamTrack | string,\n    init?: RTCRtpTransceiverInitExtended,\n  ): RTCRtpTransceiver {\n    const transceiver = super.addTransceiver(trackOrKind, init);\n    if (init?.simulcast) {\n      if (transceiver && transceiver.sender) {\n        const parameters = transceiver.sender.getParameters();\n        parameters.encodings = init?.isScreen\n          ? [\n              { rid: '1', active: true },\n              { rid: '0', active: true },\n            ]\n          : [\n              {\n                rid: '2',\n                active: true,\n                ...(init?.maxBitrate && {\n                  maxBitrate: Math.floor((init?.maxBitrate * 5) / 8),\n                }),\n              },\n              {\n                rid: '1',\n                active: true,\n                ...(init?.maxBitrate && {\n                  maxBitrate: Math.floor((init?.maxBitrate * 2) / 8),\n                }),\n                scaleResolutionDownBy: 2,\n              },\n              {\n                rid: '0',\n                active: true,\n                ...(init?.maxBitrate && {\n                  maxBitrate: Math.floor((init?.maxBitrate * 1) / 8),\n                }),\n                scaleResolutionDownBy: 2,\n              },\n            ];\n        transceiver.sender.setParameters(parameters);\n      }\n    }\n\n    if (init?.preferredCodecs) {\n      const codecs = RTCRtpSender.getCapabilities(init.preferredCodecs.kind)\n        ?.codecs;\n      if (!codecs) return transceiver;\n      codecs.sort((c1, c2) => {\n        let c1_index = init.preferredCodecs?.codecs.indexOf(\n          c1.mimeType.replace('video/', ''),\n        );\n        let c2_index = init.preferredCodecs?.codecs.indexOf(\n          c2.mimeType.replace('video/', ''),\n        );\n\n        if (c1_index! < 0) c1_index = 1000;\n        if (c2_index! < 0) c2_index = 1000;\n        if (c1_index! < c2_index!) {\n          return -1;\n        }\n        if (c1_index! > c2_index!) {\n          return 1;\n        }\n        return 0;\n      });\n      transceiver.setCodecPreferences(codecs);\n    }\n    return transceiver;\n  }\n}\n","import type { ReceiverInfo, SenderInfo } from '../utils/interface';\nimport { getTrack } from '../utils/shared';\n\nexport class SenderTrack {\n  private static seed = 0;\n  public uuid: string;\n  constructor(\n    public stream: MediaStream | null,\n    public info: SenderInfo,\n    public transceiver?: RTCRtpTransceiver,\n  ) {\n    this.uuid = `sender-${info.kind}-${SenderTrack.seed++}`;\n  }\n\n  replaceStream(stream: MediaStream | null) {\n    if (stream === this.stream) {\n      return;\n    }\n    this.stream = stream;\n    if (this.transceiver) {\n      this.transceiver.sender.replaceTrack(\n        getTrack(stream, this.info.kind) || null,\n      );\n    }\n  }\n\n  getTrack() {\n    return getTrack(this.stream, this.info.kind);\n  }\n}\n\nexport class ReceiverTrack {\n  private static seed = 0;\n  public uuid: string;\n  constructor(\n    public stream: MediaStream,\n    public info: ReceiverInfo,\n  ) {\n    const track = this.getTrack();\n    this.uuid = track?.id || `receiver-${info.kind}-${ReceiverTrack.seed++}`;\n  }\n\n  getTrack() {\n    return getTrack(this.stream, this.info.kind);\n  }\n}\n","import type { IMediaGatewayConnector } from './gateway';\nimport type { ISessionConfig } from '../utils/interface';\nimport { TypedEventEmitter } from '../utils/typed-event-emitter';\nimport _debug from 'debug';\nimport {\n  LatencyMode,\n  LatencyMode2MaxPackets,\n  StreamKinds,\n  type SenderConfig,\n} from '../utils/types';\nimport { delay, getTrack } from '../utils/shared';\nimport pako from 'pako';\nimport { RTCPeerConnectionAugmented } from '../utils/rtc-peer';\nimport { ReceiverTrack, SenderTrack } from './tracks';\n\nexport enum RealtimeSocketEvent {\n  Message = 'message',\n  State = 'state',\n}\n\nexport enum RealtimeSocketState {\n  Created = 'created',\n  Connecting = 'connecting',\n  Connected = 'connected',\n  Disconnected = 'disconnected',\n  Failed = 'failed',\n  Closed = 'closed',\n}\n\nexport interface IRealtimeSocketCallbacks {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  message: (data: any) => void;\n  peer_state: (state: RealtimeSocketState) => void;\n  dc_state: (state: RealtimeSocketState) => void;\n}\n\nexport interface IRealtimeSocket\n  extends TypedEventEmitter<IRealtimeSocketCallbacks> {\n  connect(\n    connector: IMediaGatewayConnector,\n    config: ISessionConfig,\n  ): Promise<void>;\n  // reconnect(connector: IMediaGatewayConnector): Promise<void>;\n\n  createReceiverTrack(id: string, kind: StreamKinds): ReceiverTrack;\n  createSenderTrack(cfg: SenderConfig): SenderTrack;\n\n  generateOffer(): Promise<{\n    offer: RTCSessionDescriptionInit;\n    meta: {\n      sdp: string;\n      senders: {\n        uuid: string;\n        label: string;\n        kind: StreamKinds;\n        screen: boolean;\n      }[];\n      receivers: {\n        audio: number;\n        video: number;\n      };\n    };\n  }>;\n\n  updateSdp(\n    localOffer: RTCSessionDescriptionInit,\n    remoteAnswerSdp: string,\n  ): void;\n\n  send(data: string | Uint8Array): void;\n\n  close(): void;\n}\n\nexport interface IRealtimeSocketOptions {\n  iceServers?: RTCIceServer[];\n  latencyMode?: LatencyMode;\n}\n\nexport class RealtimeSocket\n  extends TypedEventEmitter<IRealtimeSocketCallbacks>\n  implements IRealtimeSocket\n{\n  private _log = _debug('atm0s:realtime-socket');\n  private _pConnState: RealtimeSocketState = RealtimeSocketState.Created;\n  private _dcState: RealtimeSocketState = RealtimeSocketState.Created;\n  private _lc?: RTCPeerConnectionAugmented;\n  private _dc?: RTCDataChannel;\n  private _sendStreams = new Map<string, SenderTrack>();\n  private _recvStreams = new Map<string, ReceiverTrack>();\n\n  private _msg_encoder = new TextEncoder();\n\n  constructor(\n    private _urls: string | string[],\n    private _options?: IRealtimeSocketOptions,\n  ) {\n    super();\n    const peerConfig: RTCConfiguration = {\n      iceServers: this._options?.iceServers || [],\n      ...(this._options?.latencyMode &&\n        this._options.latencyMode in LatencyMode2MaxPackets && {\n          audioJitterBufferMaxPackets:\n            LatencyMode2MaxPackets[this._options.latencyMode],\n          rtcAudioJitterBufferMaxPackets:\n            LatencyMode2MaxPackets[this._options.latencyMode],\n        }),\n    };\n    this._lc = new RTCPeerConnectionAugmented(peerConfig);\n    this._dc = this._lc.createDataChannel('data', {\n      ordered: false,\n      maxPacketLifeTime: 10000,\n    });\n  }\n\n  public async connect(\n    connector: IMediaGatewayConnector,\n    config: ISessionConfig,\n  ) {\n    this._log('connect :: connecting to %s', this._urls);\n    this._pConnState = RealtimeSocketState.Connecting;\n\n    const serverUrl = await connector.selectFromUrls(this._urls);\n    this._log('connect :: try connect to media server:', serverUrl);\n\n    this._lc!.ontrack = (event: RTCTrackEvent) => {\n      if (event.streams.length === 0) {\n        this._log('connect :: no stream found');\n        return;\n      }\n      const stream = event.streams[0];\n      const track = event.track;\n\n      this._log('connect :: received track:', track, stream);\n\n      for (const receiver of this._recvStreams.values()) {\n        if (\n          receiver.info.remoteId === stream?.id &&\n          receiver.stream.getTracks().length === 0 &&\n          receiver.info.kind === track.kind\n        ) {\n          receiver.stream = stream;\n          receiver.stream.addTrack(track);\n          // this.emit(RealtimeSocketEvent.Message, receiver);\n        }\n      }\n    };\n\n    this._lc!.onconnectionstatechange = () => {\n      this._log('connection state changed:', this._lc!.connectionState);\n      switch (this._lc!.connectionState) {\n        case 'connected':\n          this.setConnState(RealtimeSocketState.Connected);\n          break;\n        case 'disconnected':\n          this.setConnState(RealtimeSocketState.Disconnected);\n          break;\n        case 'failed':\n          this.setConnState(RealtimeSocketState.Failed);\n          throw new Error('Peer Connection failed');\n          break;\n        case 'closed':\n          this.setConnState(RealtimeSocketState.Closed);\n          break;\n      }\n    };\n\n    this._dc!.onmessage = (event) => {\n      this.emit(RealtimeSocketEvent.Message, event.data);\n    };\n    this._dc!.onopen = () => {\n      this.setDcState(RealtimeSocketState.Connected);\n      this._log('datachannel connect :: opended');\n    };\n    this._dc!.onerror = (err) => {\n      this.setDcState(RealtimeSocketState.Failed);\n      this._log('datachannel connect :: error:', err);\n    };\n    this._dc!.onclose = () => {\n      this.setDcState(RealtimeSocketState.Closed);\n      this._log('datachannel connect :: closed');\n    };\n\n    const offer = await this._lc!.createOffer({\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: false,\n    });\n    this._log('connect :: created offer:', offer);\n\n    const res = await connector.connect(serverUrl, {\n      // TODO: consider remove session config dependency\n      room: config.roomId,\n      peer: config.peerId,\n      token: config.token,\n      sdp: offer.sdp!,\n      // mix_minus_audio: config.mix_minus_audio?.mode,\n      // codecs: config.codecs,\n      senders: Array.from(this._sendStreams.values()).map((s) => ({\n        uuid: s.uuid,\n        label: s.info.label,\n        kind: s.info.kind,\n        screen: s.info.screen,\n      })),\n      receivers: {\n        audio: Array.from(this._recvStreams.values()).filter(\n          (s) => s.info.kind === StreamKinds.AUDIO,\n        ).length,\n        video: Array.from(this._recvStreams.values()).filter(\n          (s) => s.info.kind === StreamKinds.VIDEO,\n        ).length,\n      },\n    });\n    if (!res.status) {\n      this._log('connect :: failed to connect:', res);\n      throw new Error(res.error);\n    }\n    const nodeId = res.data.node_id;\n    const connId = res.data.conn_id;\n    const sdp = res.data.sdp;\n\n    this._log('connect :: received answer:', nodeId, connId, sdp);\n    this._lc!.onicecandidate = async (ice) => {\n      if (ice && ice.candidate)\n        await connector.iceCandidate(serverUrl, nodeId, connId, ice);\n    };\n    this._lc!.setLocalDescription(offer);\n    this._lc!.setRemoteDescription(\n      new RTCSessionDescription({ sdp, type: 'answer' }),\n    );\n  }\n\n  private setConnState(state: RealtimeSocketState) {\n    this._pConnState = state;\n    this.emit('peer_state', this._pConnState);\n  }\n\n  private setDcState(state: RealtimeSocketState) {\n    this._dcState = state;\n    this.emit('dc_state', this._dcState);\n  }\n\n  // public async reconnect(connector: IMediaGatewayConnector) {\n  //   // TODO: implement reconnect\n  //   // this.close();\n  //   // this.connect(connector);\n  // }\n\n  public createReceiverTrack(id: string, kind: StreamKinds): ReceiverTrack {\n    this._log('createReceiverTrack :: kind:', kind);\n    const stream = new MediaStream();\n    this._lc?.addTransceiver(kind, {\n      direction: 'recvonly',\n    });\n    const track = new ReceiverTrack(stream, {\n      remoteId: id,\n      kind: kind,\n    });\n    this._recvStreams.set(track.uuid, track);\n    // TODO: Latency mode\n    return track;\n  }\n\n  public createSenderTrack(cfg: SenderConfig): SenderTrack {\n    this._log('createSenderTrack :: kind:', cfg.kind);\n    const track = getTrack(cfg.stream, cfg.kind);\n    const label = track?.label || 'not-supported';\n\n    const transceiver = this._lc?.addTransceiver(track!, {\n      direction: 'sendonly',\n      streams: [cfg.stream!],\n      preferredCodecs: {\n        kind: cfg.kind,\n        codecs: cfg.preferredCodecs!,\n      },\n      simulcast: cfg.simulcast,\n      maxBitrate: cfg.maxBitrate,\n      isScreen: cfg.screen,\n    });\n    const senderTrack = new SenderTrack(\n      cfg.stream || null,\n      {\n        label: label,\n        kind: cfg.kind,\n        name: cfg.name,\n        screen: !!cfg.screen,\n      },\n      transceiver,\n    );\n    this._sendStreams.set(senderTrack.uuid, senderTrack);\n    return senderTrack;\n  }\n\n  public async generateOffer() {\n    const offer = await this._lc!.createOffer({\n      offerToReceiveAudio: true,\n      offerToReceiveVideo: true,\n    });\n    const meta = {\n      sdp: offer.sdp!,\n      senders: Array.from(this._sendStreams.values()).map((s) => ({\n        uuid: s.uuid,\n        label: s.info.label,\n        kind: s.info.kind,\n        screen: s.info.screen,\n      })),\n      receivers: {\n        audio: Array.from(this._recvStreams.values()).filter(\n          (s) => s.info.kind === StreamKinds.AUDIO,\n        ).length,\n        video: Array.from(this._recvStreams.values()).filter(\n          (s) => s.info.kind === StreamKinds.VIDEO,\n        ).length,\n      },\n    };\n    return { offer, meta };\n  }\n\n  public updateSdp(\n    localOffer: RTCSessionDescriptionInit,\n    remoteAnswerSdp: string,\n  ) {\n    this._log('updateSdp :: local offer:', localOffer);\n    this._log('updateSdp :: remote answer sdp:', remoteAnswerSdp);\n    this._lc!.setLocalDescription(localOffer);\n    this._lc!.setRemoteDescription(\n      new RTCSessionDescription({ sdp: remoteAnswerSdp, type: 'answer' }),\n    );\n  }\n\n  public send(data: string | Uint8Array) {\n    const msg =\n      typeof data !== 'string' ? data : this._msg_encoder.encode(data);\n    if (data.length < 1000) {\n      this._dc?.send(msg);\n    } else {\n      const compressed = pako.deflate(msg);\n      this._dc?.send(compressed);\n    }\n  }\n\n  async close() {\n    this._dc?.close();\n    await delay(500);\n    this._lc?.close();\n  }\n}\n","import type { ReceiverTrack } from './utils/interface';\nimport type { IRPC } from './core/rpc';\nimport { TypedEventEmitter } from './utils/typed-event-emitter';\nimport _debug from 'debug';\n\nexport interface IStreamReceiver {\n  switch(name: string, peerId: string, priority?: number): Promise<boolean>;\n  limit(\n    priority: number,\n    max_spatial: number,\n    max_temporal: number,\n  ): Promise<boolean>;\n  stop(): Promise<boolean>;\n}\n\nexport enum StreamReceiverState {\n  NoSource = 'no_source',\n  Connecting = 'connecting',\n  Live = 'live',\n  Pause = 'paused',\n  KeyOnly = 'key_only',\n  SourceDeactived = 'source_deactived',\n}\n\nexport interface IStreamReceiverCallbacks {\n  state: (state: StreamReceiverState) => void;\n  audio_level: (level: number) => void;\n}\n\nexport class StreamReceiver\n  extends TypedEventEmitter<IStreamReceiverCallbacks>\n  implements IStreamReceiver\n{\n  kind: string;\n  remoteId: string;\n  hasTrack: boolean = false;\n  hasTrackPromises: Array<(value: unknown) => void> = [];\n  private _state: StreamReceiverState = StreamReceiverState.NoSource;\n  private _log = _debug('atm0s:stream-receiver');\n\n  constructor(\n    private _rpc: IRPC,\n    private _track: ReceiverTrack,\n  ) {\n    super();\n    this.kind = this._track.info.kind;\n    this.remoteId = this._track.info.remoteId;\n    this._rpc.on(`local_stream_${this.remoteId}_audio_level`, (_, info) => {\n      this._setState(info.state);\n    });\n    this._rpc.on(`local_stream_${this.remoteId}_state`, (_, info) => {\n      this.emit('audio_level', info.level);\n    });\n  }\n\n  private _setState(state: StreamReceiverState) {\n    this._state = state;\n    this.emit('state', state);\n  }\n\n  private async internalReady() {\n    if (this.hasTrack) return true;\n    return new Promise((resolve) => {\n      this.hasTrackPromises.push(resolve); //this ensure checking order\n    });\n  }\n\n  async switch(name: string, peerId: string, priority: number = 50) {\n    this._log('switch stream', name, peerId);\n    await this.internalReady();\n    if (this._track.stream) {\n      this._setState(StreamReceiverState.Connecting);\n      const res = await this._rpc.request<unknown, { status: boolean }>(\n        'receiver.switch',\n        {\n          id: this.remoteId,\n          priority,\n          remote: { peer: peerId, stream: name },\n        },\n      );\n      if (res.status === true) {\n        return true;\n      } else {\n        this._setState(StreamReceiverState.NoSource);\n        return false;\n      }\n    }\n    return false;\n  }\n\n  async limit(\n    priority: number,\n    max_spatial: number,\n    max_temporal: number,\n  ): Promise<boolean> {\n    this._log('limit stream', priority, max_spatial, max_temporal);\n    await this.internalReady();\n    if (this._track.stream) {\n      const res = await this._rpc.request<unknown, { status: boolean }>(\n        'receiver.limit',\n        {\n          id: this.remoteId,\n          priority,\n          max_spatial,\n          max_temporal,\n        },\n      );\n      if (res.status === true) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  async stop() {\n    if (this._state === StreamReceiverState.NoSource) {\n      return true;\n    }\n    const res = await this._rpc.request<{ id: string }, { status: boolean }>(\n      'receiver.disconnect',\n      {\n        id: this.remoteId,\n      },\n    );\n    if (res.status === true) {\n      this._setState(StreamReceiverState.NoSource);\n      return true;\n    }\n    return false;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport pako from 'pako';\nimport { RealtimeSocketState, type IRealtimeSocket } from './socket';\nimport _debug from 'debug';\nimport type { AnyFunction } from '../utils/types';\n\nexport interface IRPC {\n  request<DataType, ResponseType>(\n    cmd: string,\n    data: DataType,\n  ): Promise<ResponseType>;\n  // event<T>(cmd: string, data: T): void;\n\n  on(cmd: string, handler: AnyFunction): void;\n  off(cmd: string): void;\n}\n\nexport class RpcRequest {\n  createdAt: Date;\n\n  constructor(\n    public reqId: number,\n    private method: string,\n    private params: any,\n    public resolve: (data: any) => void,\n    public reject: (error: any) => void,\n  ) {\n    this.createdAt = new Date();\n  }\n\n  toJson() {\n    return {\n      req_id: this.reqId,\n      type: 'request',\n      request: this.method,\n      data: this.params,\n    };\n  }\n}\n\nexport class RPC implements IRPC {\n  private _reqSeed = 0;\n  private _msgDecoder = new TextDecoder();\n  private _log = _debug('atm0s:rpc');\n  private _handlers: Map<string, AnyFunction> = new Map();\n  private _reqs: Map<number, RpcRequest> = new Map();\n\n  connected = false;\n\n  constructor(private _socket: IRealtimeSocket) {\n    this._socket.on('message', this._prereceiveMessage);\n    this._socket.on('dc_state', (state) => {\n      if (state === RealtimeSocketState.Connected) {\n        this.connected = true;\n      }\n    });\n  }\n\n  private _prereceiveMessage = (data: any) => {\n    if (data instanceof Blob) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const compressed = new Uint8Array(reader.result as ArrayBuffer);\n        const decompressed = pako.inflate(compressed);\n        const msg = this._msgDecoder.decode(decompressed);\n        this._onReceiveMessage(msg);\n      };\n      reader.readAsArrayBuffer(data);\n    } else if (data instanceof ArrayBuffer) {\n      const decompressed = pako.inflate(data);\n      const msg = this._msgDecoder.decode(decompressed);\n      this._log('decompress', data.byteLength, msg, msg.length);\n      this._onReceiveMessage(msg);\n    } else {\n      this._onReceiveMessage(data);\n    }\n  };\n\n  private _onReceiveMessage = (msg: string) => {\n    this._log('datachannel on message:', msg);\n    const json = JSON.parse(msg);\n\n    const type = json.type;\n    if (type === 'event') {\n      const handler = this._handlers.get(json.event);\n      if (handler) {\n        handler(json.event, json.data);\n      }\n    } else if (type === 'request') {\n      this._socket.send(\n        JSON.stringify({\n          type: 'answer',\n          status: false,\n          error: 'NOT_SUPPORT',\n        }),\n      );\n    } else if (type === 'answer') {\n      const req = this._reqs.get(json.req_id);\n      if (req) {\n        if (json.success === true) {\n          req.resolve({\n            status: true,\n            data: json.data,\n          });\n        } else {\n          req.resolve({\n            status: false,\n            error: json.error,\n          });\n        }\n      } else {\n        this._log;\n      }\n    }\n  };\n\n  request(cmd: string, data: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const req = new RpcRequest(this._reqSeed++, cmd, data, resolve, reject);\n      this._reqs.set(req.reqId, req);\n      this._socket.send(JSON.stringify(req.toJson()));\n    });\n  }\n\n  // event(cmd: string, data: any): void {\n  //   const event = {\n  //     req_id: this.reqId,\n  //     type: 'request',\n  //     request: this.method,\n  //     data: this.params,\n  //   };\n  // }\n\n  on(cmd: string, handler: (data: any) => void): void {\n    this._handlers.set(cmd, handler);\n  }\n\n  off(cmd: string): void {\n    this._handlers.delete(cmd);\n  }\n}\n","import type { IRPC } from './core/rpc';\nimport type { SenderTrack } from './core/tracks';\nimport { TypedEventEmitter } from './utils/typed-event-emitter';\nimport { StreamKinds } from './utils/types';\nimport _debug from 'debug';\n\nexport interface IStreamSender\n  extends TypedEventEmitter<IStreamSenderCallbacks> {\n  switch(stream: MediaStream): void;\n  stop(): Promise<void>;\n}\n\nexport enum StreamSenderState {\n  Created = 'created',\n  Connecting = 'connecting',\n  Connected = 'connected',\n  Deactivated = 'deactived',\n  Closed = 'closed',\n}\n\nexport interface IStreamSenderCallbacks {\n  state: (state: StreamSenderState) => void;\n  audio_level: (level: number) => void;\n}\n\nexport class StreamSender\n  extends TypedEventEmitter<IStreamSenderCallbacks>\n  implements IStreamSender\n{\n  kind: StreamKinds;\n  name: string;\n\n  private _state: StreamSenderState = StreamSenderState.Created;\n  private _log = _debug('atm0s:stream-sender');\n  constructor(\n    private _rpc: IRPC,\n    private _track: SenderTrack,\n  ) {\n    super();\n    this.kind = this._track.info.kind;\n    this.name = this._track.info.name;\n    this._rpc.on(`remote_stream_${this.name}_state`, () => {\n      if (this._state === StreamSenderState.Connecting) {\n        this._setState(StreamSenderState.Connected);\n      }\n    });\n    this._rpc.on(`remote_stream_${this.name}_audio_level`, (_, info) => {\n      this.emit('audio_level', info.level);\n    });\n  }\n\n  private _setState(state: StreamSenderState) {\n    this._state = state;\n    this.emit('state', state);\n  }\n\n  switch(stream: MediaStream | null) {\n    this._log('switch stream', stream);\n    this._track.replaceStream(stream);\n    this._rpc.request('sender.toggle', {\n      name: this.name,\n      kind: this.kind,\n      track: this._track.uuid,\n    });\n    if (stream) {\n      this._setState(StreamSenderState.Connected);\n    } else {\n      this._setState(StreamSenderState.Deactivated);\n    }\n  }\n\n  async stop() {\n    if (this._state === StreamSenderState.Closed) {\n      return;\n    }\n    this._setState(StreamSenderState.Closed);\n  }\n}\n","import type { IMediaGatewayConnector } from './core/gateway';\nimport type { ISessionConfig } from './utils/interface';\nimport { StreamReceiver } from './receiver';\nimport { RPC, type IRPC } from './core/rpc';\nimport { StreamSender } from './sender';\nimport { type IRealtimeSocket } from './core/socket';\nimport { StreamKinds, type SenderConfig } from './utils/types';\nimport { debounce } from 'ts-debounce';\nimport _debug from 'debug';\n\nexport class Session {\n  private _audioSenders = new Map<string, StreamSender>();\n  private _videoSenders = new Map<string, StreamSender>();\n\n  private _audioReceivers: StreamReceiver[] = [];\n  private _videoReceivers: StreamReceiver[] = [];\n\n  private _log = _debug('atm0s:session');\n  private _rpc: IRPC;\n\n  constructor(\n    private _cfg: ISessionConfig,\n    private _socket: IRealtimeSocket,\n    private _connector: IMediaGatewayConnector,\n  ) {\n    this._socket.on('message', (data) => {\n      console.log('message', data);\n    });\n    this._socket.on('peer_state', (data) => {\n      console.log('state', data);\n    });\n    this._socket.on('dc_state', (data) => {\n      console.log('dc_state', data);\n    });\n    this._rpc = new RPC(this._socket);\n  }\n\n  async connect() {\n    this._log('start to connect ...');\n    this._cfg.senders.map((s) => {\n      if (s.stream) {\n        const senderTrack = this._socket.createSenderTrack(s);\n        const sender = new StreamSender(this._rpc, senderTrack);\n        if (senderTrack.info.kind === StreamKinds.AUDIO) {\n          this._audioSenders.set(s.name, sender);\n        }\n        if (senderTrack.info.kind === StreamKinds.VIDEO) {\n          this._videoSenders.set(s.name, sender);\n        }\n      }\n    });\n    for (let i = 0; i < this._cfg.receivers.audio; i++) {\n      const recvrTrack = this._socket.createReceiverTrack(\n        `audio_${i}`,\n        StreamKinds.AUDIO,\n      );\n      const receiver = new StreamReceiver(this._rpc, recvrTrack);\n      this._audioReceivers.push(receiver);\n    }\n    for (let i = 0; i < this._cfg.receivers.video; i++) {\n      const recvrTrack = this._socket.createReceiverTrack(\n        `video_${i}`,\n        StreamKinds.VIDEO,\n      );\n      const receiver = new StreamReceiver(this._rpc, recvrTrack);\n      this._videoReceivers.push(receiver);\n    }\n\n    return this._socket.connect(this._connector, this._cfg);\n  }\n\n  async createSender(cfg: SenderConfig) {\n    const senderTrack = this._socket.createSenderTrack(cfg);\n    const sender = new StreamSender(this._rpc, senderTrack);\n    if (cfg.kind === StreamKinds.AUDIO) {\n      this._audioSenders.set(cfg.name, sender);\n    }\n    if (cfg.kind === StreamKinds.VIDEO) {\n      this._videoSenders.set(cfg.name, sender);\n    }\n    this.update();\n    return sender;\n  }\n\n  async createReceiver(kind: StreamKinds) {\n    const recvrTrack = this._socket.createReceiverTrack(\n      `${kind}_${this._audioReceivers.length}`,\n      kind,\n    );\n    const receiver = new StreamReceiver(this._rpc, recvrTrack);\n    if (kind === StreamKinds.AUDIO) {\n      this._audioReceivers.push(receiver);\n    }\n    if (kind === StreamKinds.VIDEO) {\n      this._videoReceivers.push(receiver);\n    }\n    this.update();\n    return receiver;\n  }\n\n  async takeReceiver(kind: StreamKinds) {\n    const receiver =\n      kind === StreamKinds.AUDIO\n        ? this._audioReceivers.shift()\n        : this._videoReceivers.shift();\n    if (!receiver) {\n      throw new Error('NO_RECEIVER');\n    }\n    // this.update();\n    return receiver;\n  }\n\n  async backReceiver(receiver: StreamReceiver) {\n    if (receiver.kind === StreamKinds.AUDIO) {\n      this._audioReceivers.push(receiver);\n    }\n    if (receiver.kind === StreamKinds.VIDEO) {\n      this._videoReceivers.push(receiver);\n    }\n  }\n\n  async getSender(name: string, kind: StreamKinds) {\n    const sender =\n      kind === StreamKinds.AUDIO\n        ? this._audioSenders.get(name)\n        : this._videoSenders.get(name);\n    if (!sender) {\n      throw new Error('NO_SENDER');\n    }\n    return sender;\n  }\n\n  update = debounce(this.updateSdp, 500, {\n    isImmediate: false,\n  });\n\n  private async updateSdp() {\n    const { offer, meta } = await this._socket.generateOffer();\n    this._log('send updated sdp:', meta);\n    const res = await this._rpc!.request<\n      unknown,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      { status: boolean; data: any }\n    >('peer.updateSdp', meta);\n    if (!res.status) {\n      this._log('updateSdp :: Error response from server', res);\n      throw new Error('SERVER_ERROR');\n    }\n    this._log('updateSdp :: received answer:', res.data);\n    this._socket.updateSdp(offer, res.data.sdp);\n  }\n}\n","import { MediaGatewayConnector } from './lib/core/gateway';\nimport { RealtimeSocket } from './lib/core/socket';\nimport { Session } from './lib/session';\nimport type { ISessionConfig } from './lib/utils/interface';\n\nexport function createSession(urls: string | string[], cfg: ISessionConfig) {\n  const socket = new RealtimeSocket(urls);\n  const gateway = new MediaGatewayConnector();\n  return new Session(cfg, socket, gateway);\n}\n"],"names":["debounce"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAgB,SAAA,QAAQ,CAAI,GAAW,EAAE,IAAa,EAAA;AACpD,IAAA,IAAM,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;AAChC,IAAA,SAAS,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAErD,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAEjC,IAAA,IAAM,cAAc,GAAG;AACrB,QAAA,MAAM,EAAE,MAAM;AACd,QAAA,OAAO,EAAE,SAAS;AAClB,QAAA,IAAI,EAAE,GAAG;AACT,QAAA,QAAQ,EAAE,QAA2B;KACtC,CAAC;AAEF,IAAA,OAAO,KAAK,CAAC,GAAG,EAAE,cAAc,CAAC;SAC9B,IAAI,CAAC,UAAC,QAAQ,EAAK,EAAA,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAf,EAAe,CAAC;AACnC,SAAA,IAAI,CAAC,UAAC,MAAM,EAAA,EAAK,OAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAlB,EAAkB,CAAC,CAAC;AAC1C,CAAC;AAEK,SAAU,OAAO,CAAI,GAAW,EAAA;AACpC,IAAA,IAAM,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;AAChC,IAAA,SAAS,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;AAErD,IAAA,IAAM,cAAc,GAAG;AACrB,QAAA,MAAM,EAAE,KAAK;AACb,QAAA,OAAO,EAAE,SAAS;AAClB,QAAA,QAAQ,EAAE,QAA2B;KACtC,CAAC;AAEF,IAAA,OAAO,KAAK,CAAC,GAAG,EAAE,cAAc,CAAC;SAC9B,IAAI,CAAC,UAAC,QAAQ,EAAK,EAAA,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAf,EAAe,CAAC;AACnC,SAAA,IAAI,CAAC,UAAC,MAAM,EAAA,EAAK,OAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAlB,EAAkB,CAAC,CAAC;AAC1C;;ACsCA,IAAA,qBAAA,kBAAA,YAAA;AAGE,IAAA,SAAA,qBAAA,CAAoB,IAAa,EAAA;QAAb,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAS;AAFzB,QAAA,IAAA,CAAA,IAAI,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC;KAEP;AAErC,IAAA,MAAA,CAAA,cAAA,CAAW,qBAAG,CAAA,SAAA,EAAA,KAAA,EAAA;AAAd,QAAA,GAAA,EAAA,YAAA;YACE,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;;;AAAA,KAAA,CAAA,CAAA;IAEY,qBAAc,CAAA,SAAA,CAAA,cAAA,GAA3B,UAA4B,IAAuB,EAAA;;;;;;;AACjD,wBAAA,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC5B,4BAAA,OAAA,CAAA,CAAA,cAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,EAAE,CAAA;AAC3B,yBAAA;wBAEK,YAAY,GAA+B,EAAE,CAAC;;;;wBAElC,MAAA,GAAA,QAAA,CAAA,IAAI,CAAA,EAAA,QAAA,GAAA,MAAA,CAAA,IAAA,EAAA,CAAA;;;;wBAAX,GAAG,GAAA,QAAA,CAAA,KAAA,CAAA;AACZ,wBAAA,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;;;;AAEX,wBAAA,OAAA,CAAA,CAAA,YAAM,OAAO,CAGtB,GAAG,GAAG,kBAAkB,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAA,CAAA;;AAH7C,wBAAA,GAAG,GAAG,EAGuC,CAAA,IAAA,EAAA,CAAA;AACnD,wBAAA,IAAI,GAAG,CAAC,MAAM,KAAK,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;AAC9D,4BAAA,OAAA,CAAA,CAAA,aAAO,GAAG,CAAC,CAAA;AACZ,yBAAA;;;;AAED,wBAAA,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;wBACzB,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,YAAY,EAAE,GAAG,EAAE,KAAG,CAAC,CAAC;;;;;;;;;;;;;;;;AAIlE,oBAAA,KAAA,EAAA,EAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;;;;AAC9C,KAAA,CAAA;AAEK,IAAA,qBAAA,CAAA,SAAA,CAAA,OAAO,GAAb,UACE,GAAW,EACX,MAAsB,EAAA;;;gBAEtB,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC5D,OAAO,CAAA,CAAA,aAAA,QAAQ,CAAmB,GAAG,GAAG,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAA;;;AACpE,KAAA,CAAA;IAEK,qBAAY,CAAA,SAAA,CAAA,YAAA,GAAlB,UACE,GAAW,EACX,MAAc,EACd,MAAc,EACd,GAA8B,EAAA;;;;;;;AAE9B,wBAAA,IAAI,CAAC,IAAI,CAAC,gDAAgD,EAAE,GAAG,CAAC,CAAC;AAE3D,wBAAA,IAAI,GAAG;AACX,4BAAA,OAAO,EAAE,MAAM;AACf,4BAAA,OAAO,EAAE,MAAM;4BACf,SAAS,EAAE,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,KAAI,EAAE;4BACzC,OAAO,EAAE,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,KAAI,EAAE;4BACpC,eAAe,EAAE,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,KAAI,CAAC;4BAClD,iBAAiB,EAAE,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,gBAAgB,KAAI,EAAE;yBACzD,CAAC;wBAEU,OAAM,CAAA,CAAA,YAAA,QAAQ,CAAC,GAAG,GAAG,oBAAoB,EAAE,IAAI,CAAC,CAAA,CAAA;;AAAtD,wBAAA,GAAG,GAAG,EAAgD,CAAA,IAAA,EAAA,CAAA;AAC5D,wBAAA,IAAI,CAAC,IAAI,CAAC,yCAAyC,EAAE,GAAG,CAAC,CAAC;;;;;AAC3D,KAAA,CAAA;IACH,OAAC,qBAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;ACxGD;;;;AAIG;AACG,SAAgB,KAAK,CAAC,EAAU,EAAA;;;AACpC,YAAA,OAAA,CAAA,CAAA,aAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAA;AACzB,oBAAA,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AAC1B,iBAAC,CAAC,CAAC,CAAA;;;AACJ,CAAA;SAKe,UAAU,CACxB,MAAmB,EACnB,KAAkB,EAClB,kBAA0B,EAAA;;;AAA1B,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,EAAA,EAAA,kBAA0B,GAAA,KAAA,CAAA,EAAA;;AAG1B,IAAA,IAAM,gBAAgB,GAAkB,CAAC,KAAK,CAAC,CAAC;;AAEhD,IAAA,OAAO,IAAI,EAAE;AACX,QAAA,IAAM,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACpC,IAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AAC5C,QAAA,IAAI,IAAI,KAAJ,IAAA,IAAA,IAAI,uBAAJ,IAAI,CAAE,SAAS,EAAE;AACnB,YAAA,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAChC,SAAA;AAAM,aAAA;YACL,MAAM;AACP,SAAA;AACF,KAAA;;AACD,QAAA,KAAmB,IAAA,kBAAA,GAAA,QAAA,CAAA,gBAAgB,CAAA,kDAAA,EAAE,CAAA,oBAAA,CAAA,IAAA,EAAA,oBAAA,GAAA,kBAAA,CAAA,IAAA,EAAA,EAAA;AAAhC,YAAA,IAAM,IAAI,GAAA,oBAAA,CAAA,KAAA,CAAA;;AACb,gBAAA,KAAmB,IAAA,EAAA,IAAA,GAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA,CAAA,gBAAA,EAAE,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA;AAA1D,oBAAA,IAAM,IAAI,GAAA,EAAA,CAAA,KAAA,CAAA;;AAEb,oBAAA,IAAI,kBAAkB,IAAI,IAAI,KAAK,aAAa,EAAE;AAChD,wBAAA,MAAM,CAAC,cAAc,CACnB,MAAM,CAAC,SAAS,EAChB,IAAI,EACJ,CAAA,EAAA,GAAA,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MACnD,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CACtB,CAAC;AACH,qBAAA;AACF,iBAAA;;;;;;;;;AACF,SAAA;;;;;;;;;AACH,CAAC;AAEe,SAAA,QAAQ,CACtB,MAAsC,EACtC,IAAiB,EAAA;IAEjB,IAAI,CAAC,MAAM,EAAE;AACX,QAAA,OAAO,SAAS,CAAC;AAClB,KAAA;IACD,IAAI,IAAI,KAAK,OAAO,EAAE;AACpB,QAAA,OAAO,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,KAAA;IACD,IAAI,IAAI,KAAK,OAAO,EAAE;AACpB,QAAA,OAAO,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,KAAA;AACD,IAAA,OAAO,SAAS,CAAC;AACnB;;ACrFA,IAAA,YAAA,kBAAA,YAAA;AAAA,IAAA,SAAA,YAAA,GAAA;QACE,IAAM,CAAA,MAAA,GAAQ,EAAE,CAAC;KAqClB;IAnCC,YAAI,CAAA,SAAA,CAAA,IAAA,GAAJ,UAAK,KAAa,EAAA;;QAAE,IAAY,IAAA,GAAA,EAAA,CAAA;aAAZ,IAAY,EAAA,GAAA,CAAA,EAAZ,EAAY,GAAA,SAAA,CAAA,MAAA,EAAZ,EAAY,EAAA,EAAA;YAAZ,IAAY,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;;AAC9B,YAAA,KAAgB,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA,gBAAA,EAAE,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA;AAArC,gBAAA,IAAM,CAAC,GAAA,EAAA,CAAA,KAAA,CAAA;gBACV,CAAC,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAI,IAAI,CAAE,EAAA,KAAA,CAAA,CAAA,CAAA;AACZ,aAAA;;;;;;;;;KACF,CAAA;AAED,IAAA,YAAA,CAAA,SAAA,CAAA,EAAE,GAAF,UAAG,KAAa,EAAE,EAAO,EAAA;QAAzB,IAIC,KAAA,GAAA,IAAA,CAAA;QAHC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACzD,OAAO,YAAA;YACL,QAAC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,CAAM,EAAK,EAAA,OAAA,CAAC,KAAK,EAAE,CAAA,EAAA,CAAC,EAAC;AAAtE,SAAsE,CAAC;KAC1E,CAAA;AAED,IAAA,YAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,KAAa,EAAE,EAAO,EAAA;QACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,CAAM,EAAK,EAAA,OAAA,CAAC,KAAK,EAAE,CAAA,EAAA,CAAC,CAAC;KACtE,CAAA;AAED,IAAA,YAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;AACE,QAAA,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;KAClB,CAAA;AAED,IAAA,YAAA,CAAA,SAAA,CAAA,kBAAkB,GAAlB,YAAA;QACE,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB,CAAA;AAED,IAAA,YAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,KAAa,EAAE,EAAO,EAAA;AACnC,QAAA,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KACrB,CAAA;IAED,YAAS,CAAA,SAAA,CAAA,SAAA,GAAT,UAAU,KAAa,EAAA;AACrB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KAC3B,CAAA;IAED,YAAa,CAAA,SAAA,CAAA,aAAA,GAAb,UAAc,KAAa,EAAA;QACzB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;KAClC,CAAA;IACH,OAAC,YAAA,CAAA;AAAD,CAAC,EAAA,CAAA,CAAA;AAyCD;AACA,IAAA,iBAAA,kBAAA,YAAA;AAAA,IAAA,SAAA,iBAAA,GAAA;KAEI;IAAD,OAAC,iBAAA,CAAA;AAAD,CAAC,EAAA,CAAA,CAAA;AAEJ;AACA,UAAU,CAAC,iBAAiB,EAAE,YAAY,CAAC;;;ACxF3C,IAAY,WAGX,CAAA;AAHD,CAAA,UAAY,WAAW,EAAA;AACrB,IAAA,WAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,WAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EAHW,WAAW,KAAX,WAAW,GAGtB,EAAA,CAAA,CAAA,CAAA;AAED,IAAY,MAKX,CAAA;AALD,CAAA,UAAY,MAAM,EAAA;AAChB,IAAA,MAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,MAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACX,IAAA,MAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACX,IAAA,MAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACf,CAAC,EALW,MAAM,KAAN,MAAM,GAKjB,EAAA,CAAA,CAAA,CAAA;AAED,IAAY,WAIX,CAAA;AAJD,CAAA,UAAY,WAAW,EAAA;AACrB,IAAA,WAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,WAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,WAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACnB,CAAC,EAJW,WAAW,KAAX,WAAW,GAItB,EAAA,CAAA,CAAA,CAAA;AAKD,IAAY,WAQX,CAAA;AARD,CAAA,UAAY,WAAW,EAAA;AACrB,IAAA,WAAA,CAAA,UAAA,CAAA,GAAA,WAAsB,CAAA;AACtB,IAAA,WAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,WAAA,CAAA,WAAA,CAAA,GAAA,YAAwB,CAAA;AACxB,IAAA,WAAA,CAAA,WAAA,CAAA,GAAA,YAAwB,CAAA;AACxB,IAAA,WAAA,CAAA,WAAA,CAAA,GAAA,YAAwB,CAAA;AACxB,IAAA,WAAA,CAAA,YAAA,CAAA,GAAA,aAA0B,CAAA;AAC1B,IAAA,WAAA,CAAA,YAAA,CAAA,GAAA,aAA0B,CAAA;AAC5B,CAAC,EARW,WAAW,KAAX,WAAW,GAQtB,EAAA,CAAA,CAAA,CAAA;AAaD;;;;AAIG;AACI,IAAM,sBAAsB,IAAA,EAAA,GAAA,EAAA;IACjC,EAAC,CAAA,WAAW,CAAC,QAAQ,CAAA,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;IAChC,EAAC,CAAA,WAAW,CAAC,SAAS,CAAA,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;IACjC,EAAC,CAAA,WAAW,CAAC,SAAS,CAAA,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;IACjC,EAAC,CAAA,WAAW,CAAC,SAAS,CAAA,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;IACjC,EAAC,CAAA,WAAW,CAAC,UAAU,CAAA,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;IAClC,EAAC,CAAA,WAAW,CAAC,UAAU,CAAA,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;IACpC,EAAC,CAAA,WAAW,CAAC,OAAO,CAAA,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC;OAC9C,CAAC;AAEF;;AAEG;AAC+B,CAAA,EAAA,GAAA,EAAA;AAChC,IAAA,EAAA,CAAC,WAAW,CAAC,QAAQ,CAAA,GAAG,CAAC;AACzB,IAAA,EAAA,CAAC,WAAW,CAAC,SAAS,CAAA,GAAG,GAAG;AAC5B,IAAA,EAAA,CAAC,WAAW,CAAC,SAAS,CAAA,GAAG,GAAG;AAC5B,IAAA,EAAA,CAAC,WAAW,CAAC,SAAS,CAAA,GAAG,GAAG;AAC5B,IAAA,EAAA,CAAC,WAAW,CAAC,UAAU,CAAA,GAAG,CAAC;AAC3B,IAAA,EAAA,CAAC,WAAW,CAAC,UAAU,CAAA,GAAG,CAAC;AAC3B,IAAA,EAAA,CAAC,WAAW,CAAC,OAAO,CAAA,GAAG,SAAS;;;AC5DlC,IAAA,0BAAA,kBAAA,UAAA,MAAA,EAAA;IAAgD,SAAiB,CAAA,0BAAA,EAAA,MAAA,CAAA,CAAA;AAC/D,IAAA,SAAA,0BAAA,CAAY,aAAgC,EAAA;AAC1C,QAAA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,aAAa,CAAC,IAAA,IAAA,CAAA;KACrB;AAEQ,IAAA,0BAAA,CAAA,SAAA,CAAA,cAAc,GAAvB,UACE,WAAsC,EACtC,IAAoC,EAAA;;QAEpC,IAAM,WAAW,GAAG,MAAM,CAAA,SAAA,CAAA,cAAc,YAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAC5D,QAAA,IAAI,IAAI,KAAJ,IAAA,IAAA,IAAI,uBAAJ,IAAI,CAAE,SAAS,EAAE;AACnB,YAAA,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE;gBACrC,IAAM,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;gBACtD,UAAU,CAAC,SAAS,GAAG,CAAA,IAAI,aAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,QAAQ;AACnC,sBAAE;AACE,wBAAA,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE;AAC1B,wBAAA,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE;AAC3B,qBAAA;AACH,sBAAE;AAEI,wBAAA,QAAA,CAAA,EAAA,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,IAAI,EACT,GAAC,CAAA,IAAI,aAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,UAAU,KAAI;AACtB,4BAAA,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,UAAU,IAAG,CAAC,IAAI,CAAC,CAAC;yBACnD,EAAC;AAGF,wBAAA,QAAA,CAAA,QAAA,CAAA,EAAA,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,IAAI,EACT,GAAC,CAAA,IAAI,aAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,UAAU,KAAI;AACtB,4BAAA,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,UAAU,IAAG,CAAC,IAAI,CAAC,CAAC;yBACnD,EAAC,EAAA,EACF,qBAAqB,EAAE,CAAC,EAAA,CAAA;AAGxB,wBAAA,QAAA,CAAA,QAAA,CAAA,EAAA,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,IAAI,EACT,GAAC,CAAA,IAAI,aAAJ,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAJ,IAAI,CAAE,UAAU,KAAI;AACtB,4BAAA,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA,IAAI,KAAA,IAAA,IAAJ,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,UAAU,IAAG,CAAC,IAAI,CAAC,CAAC;yBACnD,EAAC,EAAA,EACF,qBAAqB,EAAE,CAAC,EAAA,CAAA;qBAE3B,CAAC;AACN,gBAAA,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AAC9C,aAAA;AACF,SAAA;AAED,QAAA,IAAI,IAAI,KAAJ,IAAA,IAAA,IAAI,uBAAJ,IAAI,CAAE,eAAe,EAAE;AACzB,YAAA,IAAM,MAAM,GAAG,CAAA,EAAA,GAAA,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAClE,MAAM,CAAC;AACX,YAAA,IAAI,CAAC,MAAM;AAAE,gBAAA,OAAO,WAAW,CAAC;AAChC,YAAA,MAAM,CAAC,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,EAAA;;gBACjB,IAAI,QAAQ,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,CAAC,OAAO,CACjD,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClC,CAAC;gBACF,IAAI,QAAQ,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,eAAe,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,MAAM,CAAC,OAAO,CACjD,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClC,CAAC;gBAEF,IAAI,QAAS,GAAG,CAAC;oBAAE,QAAQ,GAAG,IAAI,CAAC;gBACnC,IAAI,QAAS,GAAG,CAAC;oBAAE,QAAQ,GAAG,IAAI,CAAC;gBACnC,IAAI,QAAS,GAAG,QAAS,EAAE;oBACzB,OAAO,CAAC,CAAC,CAAC;AACX,iBAAA;gBACD,IAAI,QAAS,GAAG,QAAS,EAAE;AACzB,oBAAA,OAAO,CAAC,CAAC;AACV,iBAAA;AACD,gBAAA,OAAO,CAAC,CAAC;AACX,aAAC,CAAC,CAAC;AACH,YAAA,WAAW,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AACzC,SAAA;AACD,QAAA,OAAO,WAAW,CAAC;KACpB,CAAA;IACH,OAAC,0BAAA,CAAA;AAAD,CAzEA,CAAgD,iBAAiB,CAyEhE,CAAA;;AC7ED,IAAA,WAAA,kBAAA,YAAA;AAGE,IAAA,SAAA,WAAA,CACS,MAA0B,EAC1B,IAAgB,EAChB,WAA+B,EAAA;QAF/B,IAAM,CAAA,MAAA,GAAN,MAAM,CAAoB;QAC1B,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAY;QAChB,IAAW,CAAA,WAAA,GAAX,WAAW,CAAoB;AAEtC,QAAA,IAAI,CAAC,IAAI,GAAG,SAAA,CAAA,MAAA,CAAU,IAAI,CAAC,IAAI,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,WAAW,CAAC,IAAI,EAAE,CAAE,CAAC;KACzD;IAED,WAAa,CAAA,SAAA,CAAA,aAAA,GAAb,UAAc,MAA0B,EAAA;AACtC,QAAA,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;YAC1B,OAAO;AACR,SAAA;AACD,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAClC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CACzC,CAAC;AACH,SAAA;KACF,CAAA;AAED,IAAA,WAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;AACE,QAAA,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9C,CAAA;IAxBc,WAAI,CAAA,IAAA,GAAG,CAAC,CAAC;IAyB1B,OAAC,WAAA,CAAA;AAAA,CA1BD,EA0BC,CAAA,CAAA;AAED,IAAA,aAAA,kBAAA,YAAA;IAGE,SACS,aAAA,CAAA,MAAmB,EACnB,IAAkB,EAAA;QADlB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAa;QACnB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAc;AAEzB,QAAA,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,EAAE,KAAI,WAAY,CAAA,MAAA,CAAA,IAAI,CAAC,IAAI,EAAA,GAAA,CAAA,CAAA,MAAA,CAAI,aAAa,CAAC,IAAI,EAAE,CAAE,CAAC;KAC1E;AAED,IAAA,aAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;AACE,QAAA,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9C,CAAA;IAZc,aAAI,CAAA,IAAA,GAAG,CAAC,CAAC;IAa1B,OAAC,aAAA,CAAA;AAAA,CAdD,EAcC,CAAA;;AC9BD,IAAY,mBAGX,CAAA;AAHD,CAAA,UAAY,mBAAmB,EAAA;AAC7B,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,GAG9B,EAAA,CAAA,CAAA,CAAA;AAED,IAAY,mBAOX,CAAA;AAPD,CAAA,UAAY,mBAAmB,EAAA;AAC7B,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,mBAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzB,IAAA,mBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvB,IAAA,mBAAA,CAAA,cAAA,CAAA,GAAA,cAA6B,CAAA;AAC7B,IAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,mBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACnB,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,GAO9B,EAAA,CAAA,CAAA,CAAA;AAoDD,IAAA,cAAA,kBAAA,UAAA,MAAA,EAAA;IACU,SAA2C,CAAA,cAAA,EAAA,MAAA,CAAA,CAAA;IAanD,SACU,cAAA,CAAA,KAAwB,EACxB,QAAiC,EAAA;;AAF3C,QAAA,IAAA,KAAA,GAIE,iBAAO,IAgBR,IAAA,CAAA;QAnBS,KAAK,CAAA,KAAA,GAAL,KAAK,CAAmB;QACxB,KAAQ,CAAA,QAAA,GAAR,QAAQ,CAAyB;AAZnC,QAAA,KAAA,CAAA,IAAI,GAAG,MAAM,CAAC,uBAAuB,CAAC,CAAC;AACvC,QAAA,KAAA,CAAA,WAAW,GAAwB,mBAAmB,CAAC,OAAO,CAAC;AAC/D,QAAA,KAAA,CAAA,QAAQ,GAAwB,mBAAmB,CAAC,OAAO,CAAC;AAG5D,QAAA,KAAA,CAAA,YAAY,GAAG,IAAI,GAAG,EAAuB,CAAC;AAC9C,QAAA,KAAA,CAAA,YAAY,GAAG,IAAI,GAAG,EAAyB,CAAC;AAEhD,QAAA,KAAA,CAAA,YAAY,GAAG,IAAI,WAAW,EAAE,CAAC;QAOvC,IAAM,UAAU,cACd,UAAU,EAAE,CAAA,CAAA,EAAA,GAAA,KAAI,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,UAAU,KAAI,EAAE,KACvC,CAAA,MAAA,KAAI,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW;AAC5B,YAAA,KAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,sBAAsB,IAAI;YACrD,2BAA2B,EACzB,sBAAsB,CAAC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;YACnD,8BAA8B,EAC5B,sBAAsB,CAAC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;AACpD,SAAA,EACJ,CAAC;QACF,KAAI,CAAC,GAAG,GAAG,IAAI,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACtD,KAAI,CAAC,GAAG,GAAG,KAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,EAAE;AAC5C,YAAA,OAAO,EAAE,KAAK;AACd,YAAA,iBAAiB,EAAE,KAAK;AACzB,SAAA,CAAC,CAAC;;KACJ;AAEY,IAAA,cAAA,CAAA,SAAA,CAAA,OAAO,GAApB,UACE,SAAiC,EACjC,MAAsB,EAAA;;;;;;;wBAEtB,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AACrD,wBAAA,IAAI,CAAC,WAAW,GAAG,mBAAmB,CAAC,UAAU,CAAC;wBAEhC,OAAM,CAAA,CAAA,YAAA,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAA;;AAAtD,wBAAA,SAAS,GAAG,EAA0C,CAAA,IAAA,EAAA,CAAA;AAC5D,wBAAA,IAAI,CAAC,IAAI,CAAC,yCAAyC,EAAE,SAAS,CAAC,CAAC;AAEhE,wBAAA,IAAI,CAAC,GAAI,CAAC,OAAO,GAAG,UAAC,KAAoB,EAAA;;AACvC,4BAAA,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AAC9B,gCAAA,KAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;gCACxC,OAAO;AACR,6BAAA;4BACD,IAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAChC,4BAAA,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;4BAE1B,KAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;;gCAEvD,KAAuB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA;AAA9C,oCAAA,IAAM,QAAQ,GAAA,EAAA,CAAA,KAAA,CAAA;AACjB,oCAAA,IACE,QAAQ,CAAC,IAAI,CAAC,QAAQ,MAAK,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,EAAE,CAAA;wCACrC,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,MAAM,KAAK,CAAC;wCACxC,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EACjC;AACA,wCAAA,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;AACzB,wCAAA,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAEjC,qCAAA;AACF,iCAAA;;;;;;;;;AACH,yBAAC,CAAC;AAEF,wBAAA,IAAI,CAAC,GAAI,CAAC,uBAAuB,GAAG,YAAA;4BAClC,KAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,KAAI,CAAC,GAAI,CAAC,eAAe,CAAC,CAAC;AAClE,4BAAA,QAAQ,KAAI,CAAC,GAAI,CAAC,eAAe;AAC/B,gCAAA,KAAK,WAAW;AACd,oCAAA,KAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;oCACjD,MAAM;AACR,gCAAA,KAAK,cAAc;AACjB,oCAAA,KAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;oCACpD,MAAM;AACR,gCAAA,KAAK,QAAQ;AACX,oCAAA,KAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAC9C,oCAAA,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;AAE5C,gCAAA,KAAK,QAAQ;AACX,oCAAA,KAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;oCAC9C,MAAM;AACT,6BAAA;AACH,yBAAC,CAAC;AAEF,wBAAA,IAAI,CAAC,GAAI,CAAC,SAAS,GAAG,UAAC,KAAK,EAAA;4BAC1B,KAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;AACrD,yBAAC,CAAC;AACF,wBAAA,IAAI,CAAC,GAAI,CAAC,MAAM,GAAG,YAAA;AACjB,4BAAA,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;AAC/C,4BAAA,KAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;AAC9C,yBAAC,CAAC;AACF,wBAAA,IAAI,CAAC,GAAI,CAAC,OAAO,GAAG,UAAC,GAAG,EAAA;AACtB,4BAAA,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAC5C,4BAAA,KAAI,CAAC,IAAI,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAC;AAClD,yBAAC,CAAC;AACF,wBAAA,IAAI,CAAC,GAAI,CAAC,OAAO,GAAG,YAAA;AAClB,4BAAA,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAC5C,4BAAA,KAAI,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;AAC7C,yBAAC,CAAC;AAEY,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,GAAI,CAAC,WAAW,CAAC;AACxC,gCAAA,mBAAmB,EAAE,IAAI;AACzB,gCAAA,mBAAmB,EAAE,KAAK;AAC3B,6BAAA,CAAC,CAAA,CAAA;;AAHI,wBAAA,KAAK,GAAG,EAGZ,CAAA,IAAA,EAAA,CAAA;AACF,wBAAA,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;AAElC,wBAAA,OAAA,CAAA,CAAA,YAAM,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE;;gCAE7C,IAAI,EAAE,MAAM,CAAC,MAAM;gCACnB,IAAI,EAAE,MAAM,CAAC,MAAM;gCACnB,KAAK,EAAE,MAAM,CAAC,KAAK;gCACnB,GAAG,EAAE,KAAK,CAAC,GAAI;;;AAGf,gCAAA,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAA,EAAK,QAAC;oCAC1D,IAAI,EAAE,CAAC,CAAC,IAAI;AACZ,oCAAA,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK;AACnB,oCAAA,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI;AACjB,oCAAA,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM;iCACtB,EAAC,EAAA,CAAC;AACH,gCAAA,SAAS,EAAE;AACT,oCAAA,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAClD,UAAC,CAAC,EAAA,EAAK,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,CAAA,EAAA,CACzC,CAAC,MAAM;AACR,oCAAA,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAClD,UAAC,CAAC,EAAA,EAAK,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,CAAA,EAAA,CACzC,CAAC,MAAM;AACT,iCAAA;AACF,6BAAA,CAAC,CAAA,CAAA;;AAtBI,wBAAA,GAAG,GAAG,EAsBV,CAAA,IAAA,EAAA,CAAA;AACF,wBAAA,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;AACf,4BAAA,IAAI,CAAC,IAAI,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAC;AAChD,4BAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC5B,yBAAA;AACK,wBAAA,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1B,wBAAA,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;AAC1B,wBAAA,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;wBAEzB,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;AAC9D,wBAAA,IAAI,CAAC,GAAI,CAAC,cAAc,GAAG,UAAO,GAAG,EAAA,EAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAC/B,wCAAA,IAAA,EAAA,GAAG,IAAI,GAAG,CAAC,SAAS,CAAA,EAApB,OAAoB,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;AACtB,wCAAA,OAAA,CAAA,CAAA,YAAM,SAAS,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,CAAA,CAAA;;AAA5D,wCAAA,EAAA,CAAA,IAAA,EAA4D,CAAC;;;;;6BAChE,CAAC;AACF,wBAAA,IAAI,CAAC,GAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;AACrC,wBAAA,IAAI,CAAC,GAAI,CAAC,oBAAoB,CAC5B,IAAI,qBAAqB,CAAC,EAAE,GAAG,EAAA,GAAA,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CACnD,CAAC;;;;;AACH,KAAA,CAAA;IAEO,cAAY,CAAA,SAAA,CAAA,YAAA,GAApB,UAAqB,KAA0B,EAAA;AAC7C,QAAA,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC3C,CAAA;IAEO,cAAU,CAAA,SAAA,CAAA,UAAA,GAAlB,UAAmB,KAA0B,EAAA;AAC3C,QAAA,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;KACtC,CAAA;;;;;;AAQM,IAAA,cAAA,CAAA,SAAA,CAAA,mBAAmB,GAA1B,UAA2B,EAAU,EAAE,IAAiB,EAAA;;AACtD,QAAA,IAAI,CAAC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,CAAC;AAChD,QAAA,IAAM,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;AACjC,QAAA,CAAA,EAAA,GAAA,IAAI,CAAC,GAAG,0CAAE,cAAc,CAAC,IAAI,EAAE;AAC7B,YAAA,SAAS,EAAE,UAAU;AACtB,SAAA,CAAC,CAAC;AACH,QAAA,IAAM,KAAK,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE;AACtC,YAAA,QAAQ,EAAE,EAAE;AACZ,YAAA,IAAI,EAAE,IAAI;AACX,SAAA,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;;AAEzC,QAAA,OAAO,KAAK,CAAC;KACd,CAAA;IAEM,cAAiB,CAAA,SAAA,CAAA,iBAAA,GAAxB,UAAyB,GAAiB,EAAA;;QACxC,IAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AAClD,QAAA,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AAC7C,QAAA,IAAM,KAAK,GAAG,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAL,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAE,KAAK,KAAI,eAAe,CAAC;QAE9C,IAAM,WAAW,GAAG,CAAA,EAAA,GAAA,IAAI,CAAC,GAAG,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,cAAc,CAAC,KAAM,EAAE;AACnD,YAAA,SAAS,EAAE,UAAU;AACrB,YAAA,OAAO,EAAE,CAAC,GAAG,CAAC,MAAO,CAAC;AACtB,YAAA,eAAe,EAAE;gBACf,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,MAAM,EAAE,GAAG,CAAC,eAAgB;AAC7B,aAAA;YACD,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,QAAQ,EAAE,GAAG,CAAC,MAAM;AACrB,SAAA,CAAC,CAAC;QACH,IAAM,WAAW,GAAG,IAAI,WAAW,CACjC,GAAG,CAAC,MAAM,IAAI,IAAI,EAClB;AACE,YAAA,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,IAAI,EAAE,GAAG,CAAC,IAAI;AACd,YAAA,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM;SACrB,EACD,WAAW,CACZ,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACrD,QAAA,OAAO,WAAW,CAAC;KACpB,CAAA;AAEY,IAAA,cAAA,CAAA,SAAA,CAAA,aAAa,GAA1B,YAAA;;;;;AACgB,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,GAAI,CAAC,WAAW,CAAC;AACxC,4BAAA,mBAAmB,EAAE,IAAI;AACzB,4BAAA,mBAAmB,EAAE,IAAI;AAC1B,yBAAA,CAAC,CAAA,CAAA;;AAHI,wBAAA,KAAK,GAAG,EAGZ,CAAA,IAAA,EAAA,CAAA;AACI,wBAAA,IAAI,GAAG;4BACX,GAAG,EAAE,KAAK,CAAC,GAAI;AACf,4BAAA,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,EAAA,EAAK,QAAC;gCAC1D,IAAI,EAAE,CAAC,CAAC,IAAI;AACZ,gCAAA,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK;AACnB,gCAAA,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI;AACjB,gCAAA,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM;6BACtB,EAAC,EAAA,CAAC;AACH,4BAAA,SAAS,EAAE;AACT,gCAAA,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAClD,UAAC,CAAC,EAAA,EAAK,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,CAAA,EAAA,CACzC,CAAC,MAAM;AACR,gCAAA,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAClD,UAAC,CAAC,EAAA,EAAK,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,CAAA,EAAA,CACzC,CAAC,MAAM;AACT,6BAAA;yBACF,CAAC;AACF,wBAAA,OAAA,CAAA,CAAA,aAAO,EAAE,KAAK,EAAA,KAAA,EAAE,IAAI,EAAA,IAAA,EAAE,CAAC,CAAA;;;;AACxB,KAAA,CAAA;AAEM,IAAA,cAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UACE,UAAqC,EACrC,eAAuB,EAAA;AAEvB,QAAA,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,UAAU,CAAC,CAAC;AACnD,QAAA,IAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE,eAAe,CAAC,CAAC;AAC9D,QAAA,IAAI,CAAC,GAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;AAC1C,QAAA,IAAI,CAAC,GAAI,CAAC,oBAAoB,CAC5B,IAAI,qBAAqB,CAAC,EAAE,GAAG,EAAE,eAAe,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CACpE,CAAC;KACH,CAAA;IAEM,cAAI,CAAA,SAAA,CAAA,IAAA,GAAX,UAAY,IAAyB,EAAA;;QACnC,IAAM,GAAG,GACP,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnE,QAAA,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE;YACtB,CAAA,EAAA,GAAA,IAAI,CAAC,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,SAAA;AAAM,aAAA;YACL,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACrC,CAAA,EAAA,GAAA,IAAI,CAAC,GAAG,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAC5B,SAAA;KACF,CAAA;AAEK,IAAA,cAAA,CAAA,SAAA,CAAA,KAAK,GAAX,YAAA;;;;;;AACE,wBAAA,CAAA,EAAA,GAAA,IAAI,CAAC,GAAG,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,EAAE,CAAC;AAClB,wBAAA,OAAA,CAAA,CAAA,YAAM,KAAK,CAAC,GAAG,CAAC,CAAA,CAAA;;AAAhB,wBAAA,EAAA,CAAA,IAAA,EAAgB,CAAC;AACjB,wBAAA,CAAA,EAAA,GAAA,IAAI,CAAC,GAAG,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,EAAE,CAAC;;;;;AACnB,KAAA,CAAA;IACH,OAAC,cAAA,CAAA;AAAD,CA1QA,CACU,iBAAiB,CAyQ1B,CAAA;;AC1UD,IAAY,mBAOX,CAAA;AAPD,CAAA,UAAY,mBAAmB,EAAA;AAC7B,IAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,WAAsB,CAAA;AACtB,IAAA,mBAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzB,IAAA,mBAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,QAAgB,CAAA;AAChB,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,UAAoB,CAAA;AACpB,IAAA,mBAAA,CAAA,iBAAA,CAAA,GAAA,kBAAoC,CAAA;AACtC,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,GAO9B,EAAA,CAAA,CAAA,CAAA;AAOD,IAAA,cAAA,kBAAA,UAAA,MAAA,EAAA;IACU,SAA2C,CAAA,cAAA,EAAA,MAAA,CAAA,CAAA;IAUnD,SACU,cAAA,CAAA,IAAU,EACV,MAAqB,EAAA;AAF/B,QAAA,IAAA,KAAA,GAIE,iBAAO,IASR,IAAA,CAAA;QAZS,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAM;QACV,KAAM,CAAA,MAAA,GAAN,MAAM,CAAe;QAP/B,KAAQ,CAAA,QAAA,GAAY,KAAK,CAAC;QAC1B,KAAgB,CAAA,gBAAA,GAAoC,EAAE,CAAC;AAC/C,QAAA,KAAA,CAAA,MAAM,GAAwB,mBAAmB,CAAC,QAAQ,CAAC;AAC3D,QAAA,KAAA,CAAA,IAAI,GAAG,MAAM,CAAC,uBAAuB,CAAC,CAAC;QAO7C,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAClC,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC1C,QAAA,KAAI,CAAC,IAAI,CAAC,EAAE,CAAC,eAAgB,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAc,cAAA,CAAA,EAAE,UAAC,CAAC,EAAE,IAAI,EAAA;AAChE,YAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7B,SAAC,CAAC,CAAC;AACH,QAAA,KAAI,CAAC,IAAI,CAAC,EAAE,CAAC,eAAgB,CAAA,MAAA,CAAA,KAAI,CAAC,QAAQ,EAAQ,QAAA,CAAA,EAAE,UAAC,CAAC,EAAE,IAAI,EAAA;YAC1D,KAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AACvC,SAAC,CAAC,CAAC;;KACJ;IAEO,cAAS,CAAA,SAAA,CAAA,SAAA,GAAjB,UAAkB,KAA0B,EAAA;AAC1C,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KAC3B,CAAA;AAEa,IAAA,cAAA,CAAA,SAAA,CAAA,aAAa,GAA3B,YAAA;;;;gBACE,IAAI,IAAI,CAAC,QAAQ;AAAE,oBAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;AAC/B,gBAAA,OAAA,CAAA,CAAA,aAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAA;wBACzB,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,qBAAC,CAAC,CAAC,CAAA;;;AACJ,KAAA,CAAA;AAEK,IAAA,cAAA,CAAA,SAAA,CAAA,MAAM,GAAZ,UAAa,IAAY,EAAE,MAAc,EAAE,QAAqB,EAAA;AAArB,QAAA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAqB,GAAA,EAAA,CAAA,EAAA;;;;;;wBAC9D,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AACzC,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,aAAa,EAAE,CAAA,CAAA;;AAA1B,wBAAA,EAAA,CAAA,IAAA,EAA0B,CAAC;AACvB,wBAAA,IAAA,CAAA,IAAI,CAAC,MAAM,CAAC,MAAM,EAAlB,OAAkB,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;AACpB,wBAAA,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;AACnC,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CACjC,iBAAiB,EACjB;gCACE,EAAE,EAAE,IAAI,CAAC,QAAQ;AACjB,gCAAA,QAAQ,EAAA,QAAA;gCACR,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE;AACvC,6BAAA,CACF,CAAA,CAAA;;AAPK,wBAAA,GAAG,GAAG,EAOX,CAAA,IAAA,EAAA,CAAA;AACD,wBAAA,IAAI,GAAG,CAAC,MAAM,KAAK,IAAI,EAAE;AACvB,4BAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;AACb,yBAAA;AAAM,6BAAA;AACL,4BAAA,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC7C,4BAAA,OAAA,CAAA,CAAA,aAAO,KAAK,CAAC,CAAA;AACd,yBAAA;AAEH,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAO,KAAK,CAAC,CAAA;;;;AACd,KAAA,CAAA;AAEK,IAAA,cAAA,CAAA,SAAA,CAAA,KAAK,GAAX,UACE,QAAgB,EAChB,WAAmB,EACnB,YAAoB,EAAA;;;;;;wBAEpB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,WAAW,EAAE,YAAY,CAAC,CAAC;AAC/D,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,aAAa,EAAE,CAAA,CAAA;;AAA1B,wBAAA,EAAA,CAAA,IAAA,EAA0B,CAAC;AACvB,wBAAA,IAAA,CAAA,IAAI,CAAC,MAAM,CAAC,MAAM,EAAlB,OAAkB,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;AACR,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CACjC,gBAAgB,EAChB;gCACE,EAAE,EAAE,IAAI,CAAC,QAAQ;AACjB,gCAAA,QAAQ,EAAA,QAAA;AACR,gCAAA,WAAW,EAAA,WAAA;AACX,gCAAA,YAAY,EAAA,YAAA;AACb,6BAAA,CACF,CAAA,CAAA;;AARK,wBAAA,GAAG,GAAG,EAQX,CAAA,IAAA,EAAA,CAAA;AACD,wBAAA,IAAI,GAAG,CAAC,MAAM,KAAK,IAAI,EAAE;AACvB,4BAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;AACb,yBAAA;AAAM,6BAAA;AACL,4BAAA,OAAA,CAAA,CAAA,aAAO,KAAK,CAAC,CAAA;AACd,yBAAA;AAEH,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,aAAO,KAAK,CAAC,CAAA;;;;AACd,KAAA,CAAA;AAEK,IAAA,cAAA,CAAA,SAAA,CAAA,IAAI,GAAV,YAAA;;;;;;AACE,wBAAA,IAAI,IAAI,CAAC,MAAM,KAAK,mBAAmB,CAAC,QAAQ,EAAE;AAChD,4BAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;AACb,yBAAA;AACW,wBAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CACjC,qBAAqB,EACrB;gCACE,EAAE,EAAE,IAAI,CAAC,QAAQ;AAClB,6BAAA,CACF,CAAA,CAAA;;AALK,wBAAA,GAAG,GAAG,EAKX,CAAA,IAAA,EAAA,CAAA;AACD,wBAAA,IAAI,GAAG,CAAC,MAAM,KAAK,IAAI,EAAE;AACvB,4BAAA,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC7C,4BAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,CAAA;AACb,yBAAA;AACD,wBAAA,OAAA,CAAA,CAAA,aAAO,KAAK,CAAC,CAAA;;;;AACd,KAAA,CAAA;IACH,OAAC,cAAA,CAAA;AAAD,CAvGA,CACU,iBAAiB,CAsG1B,CAAA;;ACpID;AAiBA,IAAA,UAAA,kBAAA,YAAA;IAGE,SACS,UAAA,CAAA,KAAa,EACZ,MAAc,EACd,MAAW,EACZ,OAA4B,EAC5B,MAA4B,EAAA;QAJ5B,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;QACZ,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;QACd,IAAM,CAAA,MAAA,GAAN,MAAM,CAAK;QACZ,IAAO,CAAA,OAAA,GAAP,OAAO,CAAqB;QAC5B,IAAM,CAAA,MAAA,GAAN,MAAM,CAAsB;AAEnC,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;KAC7B;AAED,IAAA,UAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;QACE,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,KAAK;AAClB,YAAA,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,IAAI,CAAC,MAAM;YACpB,IAAI,EAAE,IAAI,CAAC,MAAM;SAClB,CAAC;KACH,CAAA;IACH,OAAC,UAAA,CAAA;AAAD,CAAC,EAAA,CAAA,CAAA;AAED,IAAA,GAAA,kBAAA,YAAA;AASE,IAAA,SAAA,GAAA,CAAoB,OAAwB,EAAA;QAA5C,IAOC,KAAA,GAAA,IAAA,CAAA;QAPmB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAiB;QARpC,IAAQ,CAAA,QAAA,GAAG,CAAC,CAAC;AACb,QAAA,IAAA,CAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC;AAChC,QAAA,IAAA,CAAA,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAC3B,QAAA,IAAA,CAAA,SAAS,GAA6B,IAAI,GAAG,EAAE,CAAC;AAChD,QAAA,IAAA,CAAA,KAAK,GAA4B,IAAI,GAAG,EAAE,CAAC;QAEnD,IAAS,CAAA,SAAA,GAAG,KAAK,CAAC;QAWV,IAAkB,CAAA,kBAAA,GAAG,UAAC,IAAS,EAAA;YACrC,IAAI,IAAI,YAAY,IAAI,EAAE;AACxB,gBAAA,IAAM,QAAM,GAAG,IAAI,UAAU,EAAE,CAAC;gBAChC,QAAM,CAAC,MAAM,GAAG,YAAA;oBACd,IAAM,UAAU,GAAG,IAAI,UAAU,CAAC,QAAM,CAAC,MAAqB,CAAC,CAAC;oBAChE,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;oBAC9C,IAAM,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AAClD,oBAAA,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;AAC9B,iBAAC,CAAC;AACF,gBAAA,QAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAChC,aAAA;iBAAM,IAAI,IAAI,YAAY,WAAW,EAAE;gBACtC,IAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACxC,IAAM,GAAG,GAAG,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AAClD,gBAAA,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;AAC1D,gBAAA,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;AAC7B,aAAA;AAAM,iBAAA;AACL,gBAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC9B,aAAA;AACH,SAAC,CAAC;QAEM,IAAiB,CAAA,iBAAA,GAAG,UAAC,GAAW,EAAA;AACtC,YAAA,KAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;YAC1C,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAE7B,YAAA,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,IAAI,IAAI,KAAK,OAAO,EAAE;AACpB,gBAAA,IAAM,OAAO,GAAG,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/C,gBAAA,IAAI,OAAO,EAAE;oBACX,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,iBAAA;AACF,aAAA;iBAAM,IAAI,IAAI,KAAK,SAAS,EAAE;gBAC7B,KAAI,CAAC,OAAO,CAAC,IAAI,CACf,IAAI,CAAC,SAAS,CAAC;AACb,oBAAA,IAAI,EAAE,QAAQ;AACd,oBAAA,MAAM,EAAE,KAAK;AACb,oBAAA,KAAK,EAAE,aAAa;AACrB,iBAAA,CAAC,CACH,CAAC;AACH,aAAA;iBAAM,IAAI,IAAI,KAAK,QAAQ,EAAE;AAC5B,gBAAA,IAAM,GAAG,GAAG,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACxC,gBAAA,IAAI,GAAG,EAAE;AACP,oBAAA,IAAI,IAAI,CAAC,OAAO,KAAK,IAAI,EAAE;wBACzB,GAAG,CAAC,OAAO,CAAC;AACV,4BAAA,MAAM,EAAE,IAAI;4BACZ,IAAI,EAAE,IAAI,CAAC,IAAI;AAChB,yBAAA,CAAC,CAAC;AACJ,qBAAA;AAAM,yBAAA;wBACL,GAAG,CAAC,OAAO,CAAC;AACV,4BAAA,MAAM,EAAE,KAAK;4BACb,KAAK,EAAE,IAAI,CAAC,KAAK;AAClB,yBAAA,CAAC,CAAC;AACJ,qBAAA;AACF,iBAAA;AAAM,qBAAA;oBACL,KAAI,CAAC,IAAI,CAAC;AACX,iBAAA;AACF,aAAA;AACH,SAAC,CAAC;QAhEA,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,KAAK,EAAA;AAChC,YAAA,IAAI,KAAK,KAAK,mBAAmB,CAAC,SAAS,EAAE;AAC3C,gBAAA,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACvB,aAAA;AACH,SAAC,CAAC,CAAC;KACJ;AA4DD,IAAA,GAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,GAAW,EAAE,IAAS,EAAA;QAA9B,IAMC,KAAA,GAAA,IAAA,CAAA;AALC,QAAA,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;AACjC,YAAA,IAAM,GAAG,GAAG,IAAI,UAAU,CAAC,KAAI,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACxE,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAC/B,YAAA,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAClD,SAAC,CAAC,CAAC;KACJ,CAAA;;;;;;;;;AAWD,IAAA,GAAA,CAAA,SAAA,CAAA,EAAE,GAAF,UAAG,GAAW,EAAE,OAA4B,EAAA;QAC1C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;KAClC,CAAA;IAED,GAAG,CAAA,SAAA,CAAA,GAAA,GAAH,UAAI,GAAW,EAAA;AACb,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC5B,CAAA;IACH,OAAC,GAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;AChID,IAAY,iBAMX,CAAA;AAND,CAAA,UAAY,iBAAiB,EAAA;AAC3B,IAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,iBAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzB,IAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvB,IAAA,iBAAA,CAAA,aAAA,CAAA,GAAA,WAAyB,CAAA;AACzB,IAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACnB,CAAC,EANW,iBAAiB,KAAjB,iBAAiB,GAM5B,EAAA,CAAA,CAAA,CAAA;AAOD,IAAA,YAAA,kBAAA,UAAA,MAAA,EAAA;IACU,SAAyC,CAAA,YAAA,EAAA,MAAA,CAAA,CAAA;IAQjD,SACU,YAAA,CAAA,IAAU,EACV,MAAmB,EAAA;AAF7B,QAAA,IAAA,KAAA,GAIE,iBAAO,IAWR,IAAA,CAAA;QAdS,KAAI,CAAA,IAAA,GAAJ,IAAI,CAAM;QACV,KAAM,CAAA,MAAA,GAAN,MAAM,CAAa;AAJrB,QAAA,KAAA,CAAA,MAAM,GAAsB,iBAAiB,CAAC,OAAO,CAAC;AACtD,QAAA,KAAA,CAAA,IAAI,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;QAM3C,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAClC,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QAClC,KAAI,CAAC,IAAI,CAAC,EAAE,CAAC,wBAAiB,KAAI,CAAC,IAAI,EAAA,QAAA,CAAQ,EAAE,YAAA;AAC/C,YAAA,IAAI,KAAI,CAAC,MAAM,KAAK,iBAAiB,CAAC,UAAU,EAAE;AAChD,gBAAA,KAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAC7C,aAAA;AACH,SAAC,CAAC,CAAC;AACH,QAAA,KAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAiB,CAAA,MAAA,CAAA,KAAI,CAAC,IAAI,EAAc,cAAA,CAAA,EAAE,UAAC,CAAC,EAAE,IAAI,EAAA;YAC7D,KAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AACvC,SAAC,CAAC,CAAC;;KACJ;IAEO,YAAS,CAAA,SAAA,CAAA,SAAA,GAAjB,UAAkB,KAAwB,EAAA;AACxC,QAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACpB,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KAC3B,CAAA;IAED,YAAM,CAAA,SAAA,CAAA,MAAA,GAAN,UAAO,MAA0B,EAAA;AAC/B,QAAA,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;AACnC,QAAA,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AAClC,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;YACjC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;AACf,YAAA,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;AACxB,SAAA,CAAC,CAAC;AACH,QAAA,IAAI,MAAM,EAAE;AACV,YAAA,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAC7C,SAAA;AAAM,aAAA;AACL,YAAA,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;AAC/C,SAAA;KACF,CAAA;AAEK,IAAA,YAAA,CAAA,SAAA,CAAA,IAAI,GAAV,YAAA;;;AACE,gBAAA,IAAI,IAAI,CAAC,MAAM,KAAK,iBAAiB,CAAC,MAAM,EAAE;oBAC5C,OAAO,CAAA,CAAA,YAAA,CAAA;AACR,iBAAA;AACD,gBAAA,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;;;;AAC1C,KAAA,CAAA;IACH,OAAC,YAAA,CAAA;AAAD,CApDA,CACU,iBAAiB,CAmD1B,CAAA;;ACnED,IAAA,OAAA,kBAAA,YAAA;AAUE,IAAA,SAAA,OAAA,CACU,IAAoB,EACpB,OAAwB,EACxB,UAAkC,EAAA;QAFlC,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAgB;QACpB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAiB;QACxB,IAAU,CAAA,UAAA,GAAV,UAAU,CAAwB;AAZpC,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,GAAG,EAAwB,CAAC;AAChD,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,GAAG,EAAwB,CAAC;QAEhD,IAAe,CAAA,eAAA,GAAqB,EAAE,CAAC;QACvC,IAAe,CAAA,eAAA,GAAqB,EAAE,CAAC;AAEvC,QAAA,IAAA,CAAA,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;QAmHvC,IAAM,CAAA,MAAA,GAAGA,mBAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;AACrC,YAAA,WAAW,EAAE,KAAK;AACnB,SAAA,CAAC,CAAC;QA7GD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,IAAI,EAAA;AAC9B,YAAA,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC/B,SAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,IAAI,EAAA;AACjC,YAAA,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC7B,SAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,IAAI,EAAA;AAC/B,YAAA,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAChC,SAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACnC;AAEK,IAAA,OAAA,CAAA,SAAA,CAAA,OAAO,GAAb,YAAA;;;;;AACE,gBAAA,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBAClC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,EAAA;oBACtB,IAAI,CAAC,CAAC,MAAM,EAAE;wBACZ,IAAM,WAAW,GAAG,KAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;wBACtD,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,KAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;wBACxD,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;4BAC/C,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACxC,yBAAA;wBACD,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;4BAC/C,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACxC,yBAAA;AACF,qBAAA;AACH,iBAAC,CAAC,CAAC;AACH,gBAAA,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;AAC5C,oBAAA,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CACjD,QAAS,CAAA,MAAA,CAAA,CAAC,CAAE,EACZ,WAAW,CAAC,KAAK,CAClB,CAAC;oBACI,QAAQ,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAC3D,oBAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,iBAAA;AACD,gBAAA,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;AAC5C,oBAAA,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CACjD,QAAS,CAAA,MAAA,CAAA,CAAC,CAAE,EACZ,WAAW,CAAC,KAAK,CAClB,CAAC;oBACI,QAAQ,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAC3D,oBAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,iBAAA;AAED,gBAAA,OAAA,CAAA,CAAA,aAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;;;AACzD,KAAA,CAAA;IAEK,OAAY,CAAA,SAAA,CAAA,YAAA,GAAlB,UAAmB,GAAiB,EAAA;;;;gBAC5B,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gBAClD,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACxD,gBAAA,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;oBAClC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC1C,iBAAA;AACD,gBAAA,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;oBAClC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC1C,iBAAA;gBACD,IAAI,CAAC,MAAM,EAAE,CAAC;AACd,gBAAA,OAAA,CAAA,CAAA,aAAO,MAAM,CAAC,CAAA;;;AACf,KAAA,CAAA;IAEK,OAAc,CAAA,SAAA,CAAA,cAAA,GAApB,UAAqB,IAAiB,EAAA;;;;AAC9B,gBAAA,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CACjD,EAAG,CAAA,MAAA,CAAA,IAAI,cAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAE,EACxC,IAAI,CACL,CAAC;gBACI,QAAQ,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AAC3D,gBAAA,IAAI,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;AAC9B,oBAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,iBAAA;AACD,gBAAA,IAAI,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;AAC9B,oBAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,iBAAA;gBACD,IAAI,CAAC,MAAM,EAAE,CAAC;AACd,gBAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;AACjB,KAAA,CAAA;IAEK,OAAY,CAAA,SAAA,CAAA,YAAA,GAAlB,UAAmB,IAAiB,EAAA;;;;AAC5B,gBAAA,QAAQ,GACZ,IAAI,KAAK,WAAW,CAAC,KAAK;AACxB,sBAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;AAC9B,sBAAE,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;gBACnC,IAAI,CAAC,QAAQ,EAAE;AACb,oBAAA,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;AAChC,iBAAA;;AAED,gBAAA,OAAA,CAAA,CAAA,aAAO,QAAQ,CAAC,CAAA;;;AACjB,KAAA,CAAA;IAEK,OAAY,CAAA,SAAA,CAAA,YAAA,GAAlB,UAAmB,QAAwB,EAAA;;;AACzC,gBAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;AACvC,oBAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,iBAAA;AACD,gBAAA,IAAI,QAAQ,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;AACvC,oBAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,iBAAA;;;;AACF,KAAA,CAAA;AAEK,IAAA,OAAA,CAAA,SAAA,CAAA,SAAS,GAAf,UAAgB,IAAY,EAAE,IAAiB,EAAA;;;;AACvC,gBAAA,MAAM,GACV,IAAI,KAAK,WAAW,CAAC,KAAK;sBACtB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;sBAC5B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACnC,IAAI,CAAC,MAAM,EAAE;AACX,oBAAA,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;AAC9B,iBAAA;AACD,gBAAA,OAAA,CAAA,CAAA,aAAO,MAAM,CAAC,CAAA;;;AACf,KAAA,CAAA;AAMa,IAAA,OAAA,CAAA,SAAA,CAAA,SAAS,GAAvB,YAAA;;;;;AAC0B,oBAAA,KAAA,CAAA,EAAA,OAAA,CAAA,CAAA,YAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAA,CAAA;;AAApD,wBAAA,EAAA,GAAkB,SAAkC,EAAlD,KAAK,GAAA,EAAA,CAAA,KAAA,EAAE,IAAI,GAAA,EAAA,CAAA,IAAA,CAAA;AACnB,wBAAA,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;wBACzB,OAAM,CAAA,CAAA,YAAA,IAAI,CAAC,IAAK,CAAC,OAAO,CAIlC,gBAAgB,EAAE,IAAI,CAAC,CAAA,CAAA;;AAJnB,wBAAA,GAAG,GAAG,EAIa,CAAA,IAAA,EAAA,CAAA;AACzB,wBAAA,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;AACf,4BAAA,IAAI,CAAC,IAAI,CAAC,yCAAyC,EAAE,GAAG,CAAC,CAAC;AAC1D,4BAAA,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;AACjC,yBAAA;wBACD,IAAI,CAAC,IAAI,CAAC,+BAA+B,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AACrD,wBAAA,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;;;AAC7C,KAAA,CAAA;IACH,OAAC,OAAA,CAAA;AAAD,CAAC,EAAA,CAAA;;AClJe,SAAA,aAAa,CAAC,IAAuB,EAAE,GAAmB,EAAA;AACxE,IAAA,IAAM,MAAM,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;AACxC,IAAA,IAAM,OAAO,GAAG,IAAI,qBAAqB,EAAE,CAAC;IAC5C,OAAO,IAAI,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3C;;;;"}